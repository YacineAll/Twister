{"ast":null,"code":"import axios from \"axios\";\nimport { push } from \"react-router-redux\";\nconst URL = \"http://localhost:8080/twister-server\";\nexport const LOGIN = \"LOGIN\";\nexport const LOGOUT = \"LOGOUT\";\nexport const SIGNUP = \"SIGNUP\";\nexport function login(username, password) {\n  return function async(dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"login\", username);\n    params.append(\"password\", password);\n    var request = {\n      params: params\n    };\n    axios.get(`${URL}/login`, request).then(response => {\n      if (response.data.code === -1) {\n        dispatch({\n          type: LOGIN,\n          payload: {\n            rates: response.data\n          }\n        });\n        dispatch(push({\n          pathname: \"/account\",\n          state: {\n            user: response.data\n          }\n        }));\n      }\n    }).catch(error => {\n      alert(\"error\");\n    });\n  };\n}\nexport function signup(name, lastname, email, password, sex, birthdate) {\n  return function (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"nom\", name);\n    params.append(\"prenom\", lastname);\n    params.append(\"login\", email);\n    params.append(\"password\", password);\n    params.append(\"sex\", sex);\n    params.append(\"birth_date\", birthdate);\n    var request = {\n      params: params\n    };\n    axios.get(`${URL}/createUser`, request).then(response => {\n      if (response.data.code === -1) {\n        dispatch(push(\"/login\"));\n      }\n    }).catch(error => {\n      alert(\"error\");\n    });\n  };\n}\nexport function logout(key) {\n  return function (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"key\", key);\n    var request = {\n      params: params\n    };\n    axios.get(`${URL}/logout`, request).then(response => {\n      if (response.data.code === -1) {\n        dispatch(push({\n          pathname: \"/login\",\n          state: {}\n        }));\n      }\n    }).catch(error => {\n      alert(\"error\");\n    });\n  };\n}\nexport function getFriendList(key) {\n  return function (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"key\", key);\n    var request = {\n      params: params\n    };\n    axios.get(`${URL}/listerFriends`, request).then(response => {\n      dispatch(push({\n        pathname: \"/account\",\n        friendList: response.data\n      })); // if (response.data.code === -1) {\n      // }\n    }).catch(error => {\n      alert(\"error\");\n    });\n  };\n}","map":{"version":3,"sources":["/home/melissa/Desktop/yacine/others/react/twister-client/src/actions/index.js"],"names":["axios","push","URL","LOGIN","LOGOUT","SIGNUP","login","username","password","async","dispatch","params","URLSearchParams","append","request","get","then","response","data","code","type","payload","rates","pathname","state","user","catch","error","alert","signup","name","lastname","email","sex","birthdate","logout","key","getFriendList","friendList"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { push } from \"react-router-redux\";\n\nconst URL = \"http://localhost:8080/twister-server\";\n\nexport const LOGIN = \"LOGIN\";\nexport const LOGOUT = \"LOGOUT\";\nexport const SIGNUP = \"SIGNUP\";\n\nexport function login(username, password) {\n  return function async (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"login\", username);\n    params.append(\"password\", password);\n    var request = {\n      params: params,\n    };\n    axios\n      .get(`${URL}/login`, request)\n      .then((response) => {\n        if (response.data.code === -1) {\n          dispatch({\n            type: LOGIN,\n            payload: { rates: response.data },\n          });\n          dispatch(\n            push({\n              pathname: \"/account\",\n              state: {\n                user: response.data,\n              },\n            })\n          );\n        }\n      })\n      .catch((error) => {\n        alert(\"error\");\n      });\n  };\n}\n\nexport function signup(name, lastname, email, password, sex, birthdate) {\n  return function (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"nom\", name);\n    params.append(\"prenom\", lastname);\n    params.append(\"login\", email);\n    params.append(\"password\", password);\n    params.append(\"sex\", sex);\n    params.append(\"birth_date\", birthdate);\n    var request = {\n      params: params,\n    };\n    axios\n      .get(`${URL}/createUser`, request)\n      .then((response) => {\n        if (response.data.code === -1) {\n          dispatch(push(\"/login\"));\n        }\n      })\n      .catch((error) => {\n        alert(\"error\");\n      });\n  };\n}\n\nexport function logout(key) {\n  return function (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"key\", key);\n    var request = {\n      params: params,\n    };\n    axios\n      .get(`${URL}/logout`, request)\n      .then((response) => {\n        if (response.data.code === -1) {\n          dispatch(push({ pathname: \"/login\", state: {} }));\n        }\n      })\n      .catch((error) => {\n        alert(\"error\");\n      });\n  };\n}\n\nexport function getFriendList(key) {\n  return function (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"key\", key);\n    var request = {\n      params: params,\n    };\n    axios\n      .get(`${URL}/listerFriends`, request)\n      .then((response) => {\n        dispatch(push({ pathname: \"/account\", friendList: response.data }));\n        // if (response.data.code === -1) {\n        // }\n      })\n      .catch((error) => {\n        alert(\"error\");\n      });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}