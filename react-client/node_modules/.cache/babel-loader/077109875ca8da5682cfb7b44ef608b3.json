{"ast":null,"code":"import axios from \"axios\";\nimport { push } from \"react-router-redux\";\nconst URL = \"http://localhost:8080/twister-server\";\nexport const LOGIN = \"LOGIN\";\nexport const LOGOUT = \"LOGOUT\";\nexport const SIGNUP = \"SIGNUP\";\nexport function login(username, password) {\n  return function (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"login\", username);\n    params.append(\"password\", password);\n    var request = {\n      params: params\n    };\n    axios.get(`${URL}/login`, request).then(async response => {\n      if (response.data.code === -1) {\n        const userfriendlist = await getFriendList(response.data.Key);\n        const userfriendsCommentsList = await getFriendsComments(response.data.Key);\n        const userCommentsList = await getUserComments(response.data.ID);\n        dispatch({\n          type: LOGIN,\n          payload: response.data\n        }); // dispatch(\n        //   push({\n        //     pathname: \"/account\",\n        //     state: {\n        //       user: response.data,\n        //       userfriendlist: userfriendlist,\n        //       userfriendsCommentsList: userfriendsCommentsList,\n        //       userCommentsList: userCommentsList,\n        //     },\n        //   })\n        // );\n      }\n    }).catch(error => {\n      alert(\"error\");\n    });\n  };\n}\nexport function signup(name, lastname, email, password, sex, birthdate) {\n  return function (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"nom\", name);\n    params.append(\"prenom\", lastname);\n    params.append(\"login\", email);\n    params.append(\"password\", password);\n    params.append(\"sex\", sex);\n    params.append(\"birth_date\", birthdate);\n    var request = {\n      params: params\n    };\n    axios.get(`${URL}/createUser`, request).then(response => {\n      if (response.data.code === -1) {\n        dispatch(push(\"/login\"));\n      }\n    }).catch(error => {\n      alert(\"error\");\n    });\n  };\n}\nexport function logout(key) {\n  return function (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"key\", key);\n    var request = {\n      params: params\n    };\n    axios.get(`${URL}/logout`, request).then(response => {\n      dispatch({\n        type: LOGOUT,\n        payload: response.data\n      });\n\n      if (response.data.code === -1) {\n        dispatch(push({\n          pathname: \"/login\",\n          state: {}\n        }));\n      }\n    }).catch(error => {\n      alert(\"error\");\n    });\n  };\n}\n\nasync function getFriendList(key) {\n  var params = new URLSearchParams();\n  params.append(\"key\", key);\n  var request = {\n    params: params\n  };\n  let res = await axios.get(`${URL}/listerFriends`, request);\n\n  if (res.data.code === -1) {\n    return res.data;\n  }\n\n  return [];\n}\n\nasync function getFriendsComments(key) {\n  var params = new URLSearchParams();\n  params.append(\"key\", key);\n  var request = {\n    params: params\n  };\n  let res = await axios.get(`${URL}/friendsComments`, request);\n\n  if (res.data.code === -1) {\n    return res.data;\n  }\n\n  return [];\n}\n\nasync function getUserComments(id) {\n  var params = new URLSearchParams();\n  params.append(\"idAuthor\", id);\n  var request = {\n    params: params\n  };\n  let res = await axios.get(`${URL}/commentsAuthor`, request);\n\n  if (res.data.code === -1) {\n    return res.data.comments;\n  }\n\n  return [];\n}\n\nexport function addPost(key, userCommentsList, newComment) {\n  return function (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"key\", key);\n    params.append(\"text\", newComment.text);\n    var request = {\n      params: params\n    };\n    axios.get(`${URL}/addComment`, request).then(response => {\n      if (response.data.code === -1) {\n        dispatch(push({\n          pathname: \"/account\",\n          userCommentsList: [...userCommentsList, newComment]\n        }));\n      }\n    }).catch(error => {\n      alert(\"error\");\n    });\n  };\n}","map":{"version":3,"sources":["/home/melissa/Desktop/yacine/others/react/twister-client/src/actions/index.js"],"names":["axios","push","URL","LOGIN","LOGOUT","SIGNUP","login","username","password","dispatch","params","URLSearchParams","append","request","get","then","response","data","code","userfriendlist","getFriendList","Key","userfriendsCommentsList","getFriendsComments","userCommentsList","getUserComments","ID","type","payload","catch","error","alert","signup","name","lastname","email","sex","birthdate","logout","key","pathname","state","res","id","comments","addPost","newComment","text"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { push } from \"react-router-redux\";\n\nconst URL = \"http://localhost:8080/twister-server\";\n\nexport const LOGIN = \"LOGIN\";\nexport const LOGOUT = \"LOGOUT\";\nexport const SIGNUP = \"SIGNUP\";\n\nexport function login(username, password) {\n  return function (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"login\", username);\n    params.append(\"password\", password);\n    var request = {\n      params: params,\n    };\n    axios\n      .get(`${URL}/login`, request)\n      .then(async (response) => {\n        if (response.data.code === -1) {\n          const userfriendlist = await getFriendList(response.data.Key);\n          const userfriendsCommentsList = await getFriendsComments(response.data.Key);\n          const userCommentsList = await getUserComments(response.data.ID);\n          dispatch({\n            type: LOGIN,\n            payload: response.data\n          });\n\n          // dispatch(\n          //   push({\n          //     pathname: \"/account\",\n          //     state: {\n          //       user: response.data,\n          //       userfriendlist: userfriendlist,\n          //       userfriendsCommentsList: userfriendsCommentsList,\n          //       userCommentsList: userCommentsList,\n          //     },\n          //   })\n          // );\n        }\n      })\n      .catch((error) => {\n        alert(\"error\");\n      });\n  };\n}\n\nexport function signup(name, lastname, email, password, sex, birthdate) {\n  return function (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"nom\", name);\n    params.append(\"prenom\", lastname);\n    params.append(\"login\", email);\n    params.append(\"password\", password);\n    params.append(\"sex\", sex);\n    params.append(\"birth_date\", birthdate);\n    var request = {\n      params: params,\n    };\n    axios\n      .get(`${URL}/createUser`, request)\n      .then((response) => {\n        if (response.data.code === -1) {\n          dispatch(push(\"/login\"));\n        }\n      })\n      .catch((error) => {\n        alert(\"error\");\n      });\n  };\n}\n\nexport function logout(key) {\n  return function (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"key\", key);\n    var request = {\n      params: params,\n    };\n    axios\n      .get(`${URL}/logout`, request)\n      .then((response) => {\n        dispatch({ type: LOGOUT, payload: response.data });\n        if (response.data.code === -1) {\n          dispatch(push({ pathname: \"/login\", state: {} }));\n        }\n      })\n      .catch((error) => {\n        alert(\"error\");\n      });\n  };\n}\n\nasync function getFriendList(key) {\n  var params = new URLSearchParams();\n  params.append(\"key\", key);\n  var request = {\n    params: params,\n  };\n  let res = await axios.get(`${URL}/listerFriends`, request);\n  if (res.data.code === -1) {\n    return res.data;\n  }\n  return [];\n}\n\nasync function getFriendsComments(key) {\n  var params = new URLSearchParams();\n  params.append(\"key\", key);\n  var request = {\n    params: params,\n  };\n  let res = await axios.get(`${URL}/friendsComments`, request);\n  if (res.data.code === -1) {\n    return res.data;\n  }\n  return [];\n}\n\nasync function getUserComments(id) {\n  var params = new URLSearchParams();\n  params.append(\"idAuthor\", id);\n  var request = {\n    params: params,\n  };\n  let res = await axios.get(`${URL}/commentsAuthor`, request);\n  if (res.data.code === -1) {\n    return res.data.comments;\n  }\n  return [];\n}\n\n\n\n\nexport function addPost(key, userCommentsList, newComment) {\n  return function (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"key\", key);\n    params.append(\"text\", newComment.text);\n\n    var request = {\n      params: params,\n    };\n    axios\n      .get(`${URL}/addComment`, request)\n      .then((response) => {\n        if (response.data.code === -1) {\n          dispatch(push({ pathname: \"/account\", userCommentsList: [...userCommentsList, newComment] }));\n        }\n      })\n      .catch((error) => {\n        alert(\"error\");\n      });\n  };\n}"]},"metadata":{},"sourceType":"module"}