{"ast":null,"code":"import axios from \"axios\";\nimport { push } from \"react-router-redux\";\nconst URL = \"http://localhost:8080/twister-server\";\nexport const LOGIN = \"LOGIN\";\nexport const LOGOUT = \"LOGOUT\";\nexport const SIGNUP = \"SIGNUP\";\nexport const ADD_POST = \"ADD_POST\";\nexport function login(username, password) {\n  return function (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"login\", username);\n    params.append(\"password\", password);\n    var request = {\n      params: params\n    };\n    axios.get(`${URL}/login`, request).then(async response => {\n      if (response.data.code === -1) {\n        const userfriendlist = await getFriendList(response.data.Key);\n        const userfriendsCommentsList = await getFriendsComments(response.data.Key);\n        const userCommentsList = await getUserComments(response.data.ID);\n        dispatch({\n          type: LOGIN,\n          payload: {\n            userfriendlist: userfriendlist,\n            userfriendsCommentsList: userfriendsCommentsList,\n            userCommentsList: userCommentsList\n          }\n        });\n        dispatch(push({\n          pathname: \"/account\",\n          state: {\n            user: response.data,\n            userfriendlist: userfriendlist,\n            userfriendsCommentsList: userfriendsCommentsList,\n            userCommentsList: userCommentsList\n          }\n        }));\n      }\n    }).catch(error => {\n      alert(\"error\");\n    });\n  };\n}\nexport function signup(name, lastname, email, password, sex, birthdate) {\n  return function (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"nom\", name);\n    params.append(\"prenom\", lastname);\n    params.append(\"login\", email);\n    params.append(\"password\", password);\n    params.append(\"sex\", sex);\n    params.append(\"birth_date\", birthdate);\n    var request = {\n      params: params\n    };\n    axios.get(`${URL}/createUser`, request).then(response => {\n      if (response.data.code === -1) {\n        dispatch(push(\"/login\"));\n      }\n    }).catch(error => {\n      alert(\"error\");\n    });\n  };\n}\nexport function logout(key) {\n  return function (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"key\", key);\n    var request = {\n      params: params\n    };\n    axios.get(`${URL}/logout`, request).then(response => {\n      dispatch({\n        type: LOGOUT,\n        payload: response.data\n      });\n\n      if (response.data.code === -1) {\n        dispatch(push({\n          pathname: \"/login\",\n          state: {}\n        }));\n      }\n    }).catch(error => {\n      alert(\"error\");\n    });\n  };\n}\n\nasync function getFriendList(key) {\n  var params = new URLSearchParams();\n  params.append(\"key\", key);\n  var request = {\n    params: params\n  };\n  let res = await axios.get(`${URL}/listerFriends`, request);\n\n  if (res.data.code === -1) {\n    return res.data;\n  }\n\n  return [];\n}\n\nasync function getFriendsComments(key) {\n  var params = new URLSearchParams();\n  params.append(\"key\", key);\n  var request = {\n    params: params\n  };\n  let res = await axios.get(`${URL}/friendsComments`, request);\n\n  if (res.data.code === -1) {\n    return res.data;\n  }\n\n  return [];\n}\n\nasync function getUserComments(id) {\n  var params = new URLSearchParams();\n  params.append(\"idAuthor\", id);\n  var request = {\n    params: params\n  };\n  let res = await axios.get(`${URL}/commentsAuthor`, request);\n\n  if (res.data.code === -1) {\n    return res.data.comments;\n  }\n\n  return [];\n}\n\nexport function addPost(key, newComment) {\n  return function (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"key\", key);\n    params.append(\"text\", newComment.comment);\n    var request = {\n      params: params\n    };\n    axios.get(`${URL}/addComment`, request).then(response => {\n      if (response.data.code === -1) {\n        newComment.id = response.data.idComment;\n        dispatch({\n          type: ADD_POST,\n          payload: newComment\n        });\n      }\n    }).catch(error => {\n      alert(\"error\");\n    });\n  };\n}","map":{"version":3,"sources":["/home/melissa/Desktop/yacine/others/react/twister-client/src/actions/index.js"],"names":["axios","push","URL","LOGIN","LOGOUT","SIGNUP","ADD_POST","login","username","password","dispatch","params","URLSearchParams","append","request","get","then","response","data","code","userfriendlist","getFriendList","Key","userfriendsCommentsList","getFriendsComments","userCommentsList","getUserComments","ID","type","payload","pathname","state","user","catch","error","alert","signup","name","lastname","email","sex","birthdate","logout","key","res","id","comments","addPost","newComment","comment","idComment"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { push } from \"react-router-redux\";\n\nconst URL = \"http://localhost:8080/twister-server\";\n\nexport const LOGIN = \"LOGIN\";\nexport const LOGOUT = \"LOGOUT\";\nexport const SIGNUP = \"SIGNUP\";\nexport const ADD_POST = \"ADD_POST\";\n\nexport function login(username, password) {\n  return function (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"login\", username);\n    params.append(\"password\", password);\n    var request = {\n      params: params,\n    };\n    axios\n      .get(`${URL}/login`, request)\n      .then(async (response) => {\n        if (response.data.code === -1) {\n          const userfriendlist = await getFriendList(response.data.Key);\n          const userfriendsCommentsList = await getFriendsComments(\n            response.data.Key\n          );\n          const userCommentsList = await getUserComments(response.data.ID);\n          dispatch({\n            type: LOGIN,\n            payload: {\n              userfriendlist: userfriendlist,\n              userfriendsCommentsList: userfriendsCommentsList,\n              userCommentsList: userCommentsList,\n            },\n          });\n\n          dispatch(\n            push({\n              pathname: \"/account\",\n              state: {\n                user: response.data,\n                userfriendlist: userfriendlist,\n                userfriendsCommentsList: userfriendsCommentsList,\n                userCommentsList: userCommentsList,\n              },\n            })\n          );\n        }\n      })\n      .catch((error) => {\n        alert(\"error\");\n      });\n  };\n}\n\nexport function signup(name, lastname, email, password, sex, birthdate) {\n  return function (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"nom\", name);\n    params.append(\"prenom\", lastname);\n    params.append(\"login\", email);\n    params.append(\"password\", password);\n    params.append(\"sex\", sex);\n    params.append(\"birth_date\", birthdate);\n    var request = {\n      params: params,\n    };\n    axios\n      .get(`${URL}/createUser`, request)\n      .then((response) => {\n        if (response.data.code === -1) {\n          dispatch(push(\"/login\"));\n        }\n      })\n      .catch((error) => {\n        alert(\"error\");\n      });\n  };\n}\n\nexport function logout(key) {\n  return function (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"key\", key);\n    var request = {\n      params: params,\n    };\n    axios\n      .get(`${URL}/logout`, request)\n      .then((response) => {\n        dispatch({ type: LOGOUT, payload: response.data });\n        if (response.data.code === -1) {\n          dispatch(push({ pathname: \"/login\", state: {} }));\n        }\n      })\n      .catch((error) => {\n        alert(\"error\");\n      });\n  };\n}\n\nasync function getFriendList(key) {\n  var params = new URLSearchParams();\n  params.append(\"key\", key);\n  var request = {\n    params: params,\n  };\n  let res = await axios.get(`${URL}/listerFriends`, request);\n  if (res.data.code === -1) {\n    return res.data;\n  }\n  return [];\n}\n\nasync function getFriendsComments(key) {\n  var params = new URLSearchParams();\n  params.append(\"key\", key);\n  var request = {\n    params: params,\n  };\n  let res = await axios.get(`${URL}/friendsComments`, request);\n  if (res.data.code === -1) {\n    return res.data;\n  }\n  return [];\n}\n\nasync function getUserComments(id) {\n  var params = new URLSearchParams();\n  params.append(\"idAuthor\", id);\n  var request = {\n    params: params,\n  };\n  let res = await axios.get(`${URL}/commentsAuthor`, request);\n  if (res.data.code === -1) {\n    return res.data.comments;\n  }\n  return [];\n}\n\nexport function addPost(key, newComment) {\n  return function (dispatch) {\n    var params = new URLSearchParams();\n    params.append(\"key\", key);\n    params.append(\"text\", newComment.comment);\n\n    var request = {\n      params: params,\n    };\n    axios\n      .get(`${URL}/addComment`, request)\n      .then((response) => {\n        if (response.data.code === -1) {\n          newComment.id = response.data.idComment;\n          dispatch({ type: ADD_POST, payload: newComment });\n        }\n      })\n      .catch((error) => {\n        alert(\"error\");\n      });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}